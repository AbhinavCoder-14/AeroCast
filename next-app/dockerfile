# Dockerfile for the Next.js application

# --- Stage 1: Build Stage ---
# We start with a version of Node.js to build the app.
FROM node:18-alpine AS builder

# Set the main workspace inside the container to /app.
WORKDIR /app

# Copy the package.json and prisma schema first for better caching.
COPY package*.json ./
COPY prisma ./prisma/

# Install all dependencies.
RUN npm install

# --- THIS IS THE CRITICAL FIX ---
# We explicitly run 'prisma generate'. This creates the Prisma Client
# that is compatible with the container's Linux environment.
RUN npx prisma generate

# Copy the rest of your application code.
COPY . .

# Build the app for production. This step now works because
# the Prisma Client has been generated.
RUN npm run build

# --- Stage 2: Production Stage ---
# We start with a fresh, clean box for the final app.
FROM node:18-alpine
WORKDIR /app

ENV NODE_ENV=production

# Copy the built app, node_modules, and package.json from the builder stage.
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

# Also copy the generated Prisma client and schema to the production image.
COPY --from=builder /app/prisma ./prisma/

EXPOSE 3000

CMD ["npm", "start"]